package com.example.assertions.responses;

import com.example.responses.Customer;
import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link Customer} specific assertions - Generated by CustomAssertionGenerator.
 */
public class CustomerAssert extends AbstractAssert<CustomerAssert, Customer> {

  /**
   * Creates a new <code>{@link CustomerAssert}</code> to make assertions on actual Customer.
   * @param actual the Customer we want to make assertions on.
   */
  public CustomerAssert(Customer actual) {
    super(actual, CustomerAssert.class);
  }

  /**
   * An entry point for CustomerAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myCustomer)</code> and get specific assertion with code completion.
   * @param actual the Customer we want to make assertions on.
   * @return a new <code>{@link CustomerAssert}</code>
   */
  public static CustomerAssert assertThat(Customer actual) {
    return new CustomerAssert(actual);
  }

  /**
   * Verifies that the actual Customer's href is equal to the given one.
   * @param href the given href to compare the actual Customer's href to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Customer's href is not equal to the given one.
   */
  public CustomerAssert hasHref(String href) {
    // check that actual Customer we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting href of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualHref = actual.getHref();
    if (!Objects.areEqual(actualHref, href)) {
      failWithMessage(assertjErrorMessage, actual, href, actualHref);
    }

    // return the current assertion for method chaining
    return this;
  }

}
