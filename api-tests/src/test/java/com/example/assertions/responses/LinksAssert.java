package com.example.assertions.responses;

import com.example.responses.*;
import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link Links} specific assertions - Generated by CustomAssertionGenerator.
 */
public class LinksAssert extends AbstractAssert<LinksAssert, Links> {

  /**
   * Creates a new <code>{@link LinksAssert}</code> to make assertions on actual Links.
   * @param actual the Links we want to make assertions on.
   */
  public LinksAssert(Links actual) {
    super(actual, LinksAssert.class);
  }

  /**
   * An entry point for LinksAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myLinks)</code> and get specific assertion with code completion.
   * @param actual the Links we want to make assertions on.
   * @return a new <code>{@link LinksAssert}</code>
   */
  public static LinksAssert assertThat(Links actual) {
    return new LinksAssert(actual);
  }

  /**
   * Verifies that the actual Links's addresses is equal to the given one.
   * @param addresses the given addresses to compare the actual Links's addresses to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Links's addresses is not equal to the given one.
   */
  public LinksAssert hasAddresses(Addresses addresses) {
    // check that actual Links we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting addresses of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Addresses actualAddresses = actual.getAddresses();
    if (!Objects.areEqual(actualAddresses, addresses)) {
      failWithMessage(assertjErrorMessage, actual, addresses, actualAddresses);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Links's cards is equal to the given one.
   * @param cards the given cards to compare the actual Links's cards to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Links's cards is not equal to the given one.
   */
  public LinksAssert hasCards(Cards cards) {
    // check that actual Links we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting cards of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Cards actualCards = actual.getCards();
    if (!Objects.areEqual(actualCards, cards)) {
      failWithMessage(assertjErrorMessage, actual, cards, actualCards);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Links's customer is equal to the given one.
   * @param customer the given customer to compare the actual Links's customer to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Links's customer is not equal to the given one.
   */
  public LinksAssert hasCustomer(Customer customer) {
    // check that actual Links we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting customer of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Customer actualCustomer = actual.getCustomer();
    if (!Objects.areEqual(actualCustomer, customer)) {
      failWithMessage(assertjErrorMessage, actual, customer, actualCustomer);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Links's self is equal to the given one.
   * @param self the given self to compare the actual Links's self to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Links's self is not equal to the given one.
   */
  public LinksAssert hasSelf(Self self) {
    // check that actual Links we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting self of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Self actualSelf = actual.getSelf();
    if (!Objects.areEqual(actualSelf, self)) {
      failWithMessage(assertjErrorMessage, actual, self, actualSelf);
    }

    // return the current assertion for method chaining
    return this;
  }

}
