package com.example.tests.assertions.responses;

import com.example.responses.CustomerItem;
import com.example.responses.Embedded;
import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;

/**
 * {@link Embedded} specific assertions - Generated by CustomAssertionGenerator.
 */
public class EmbeddedAssert extends AbstractAssert<EmbeddedAssert, Embedded> {

  /**
   * Creates a new <code>{@link EmbeddedAssert}</code> to make assertions on actual Embedded.
   * @param actual the Embedded we want to make assertions on.
   */
  public EmbeddedAssert(Embedded actual) {
    super(actual, EmbeddedAssert.class);
  }

  /**
   * An entry point for EmbeddedAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myEmbedded)</code> and get specific assertion with code completion.
   * @param actual the Embedded we want to make assertions on.
   * @return a new <code>{@link EmbeddedAssert}</code>
   */
  public static EmbeddedAssert assertThat(Embedded actual) {
    return new EmbeddedAssert(actual);
  }

  /**
   * Verifies that the actual Embedded's customer contains the given CustomerItem elements.
   * @param customer the given elements that should be contained in actual Embedded's customer.
   * @return this assertion object.
   * @throws AssertionError if the actual Embedded's customer does not contain all given CustomerItem elements.
   */
  public EmbeddedAssert hasCustomer(CustomerItem... customer) {
    // check that actual Embedded we want to make assertions on is not null.
    isNotNull();

    // check that given CustomerItem varargs is not null.
    if (customer == null) failWithMessage("Expecting customer parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getCustomer(), customer);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Embedded's customer contains <b>only<b> the given CustomerItem elements and nothing else in whatever order.
   * @param customer the given elements that should be contained in actual Embedded's customer.
   * @return this assertion object.
   * @throws AssertionError if the actual Embedded's customer does not contain all given CustomerItem elements.
   */
  public EmbeddedAssert hasOnlyCustomer(CustomerItem... customer) {
    // check that actual Embedded we want to make assertions on is not null.
    isNotNull();

    // check that given CustomerItem varargs is not null.
    if (customer == null) failWithMessage("Expecting customer parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getCustomer(), customer);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Embedded's customer does not contain the given CustomerItem elements.
   *
   * @param customer the given elements that should not be in actual Embedded's customer.
   * @return this assertion object.
   * @throws AssertionError if the actual Embedded's customer contains any given CustomerItem elements.
   */
  public EmbeddedAssert doesNotHaveCustomer(CustomerItem... customer) {
    // check that actual Embedded we want to make assertions on is not null.
    isNotNull();

    // check that given CustomerItem varargs is not null.
    if (customer == null) failWithMessage("Expecting customer parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getCustomer(), customer);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Embedded has no customer.
   * @return this assertion object.
   * @throws AssertionError if the actual Embedded's customer is not empty.
   */
  public EmbeddedAssert hasNoCustomer() {
    // check that actual Embedded we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have customer but had :\n  <%s>";
    
    // check
    if (actual.getCustomer().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getCustomer());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

}
