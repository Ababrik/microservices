package com.example.tests.assertions.responses;

import com.example.responses.Cards;
import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link Cards} specific assertions - Generated by CustomAssertionGenerator.
 */
public class CardsAssert extends AbstractAssert<CardsAssert, Cards> {

  /**
   * Creates a new <code>{@link CardsAssert}</code> to make assertions on actual Cards.
   * @param actual the Cards we want to make assertions on.
   */
  public CardsAssert(Cards actual) {
    super(actual, CardsAssert.class);
  }

  /**
   * An entry point for CardsAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myCards)</code> and get specific assertion with code completion.
   * @param actual the Cards we want to make assertions on.
   * @return a new <code>{@link CardsAssert}</code>
   */
  public static CardsAssert assertThat(Cards actual) {
    return new CardsAssert(actual);
  }

  /**
   * Verifies that the actual Cards's href is equal to the given one.
   * @param href the given href to compare the actual Cards's href to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Cards's href is not equal to the given one.
   */
  public CardsAssert hasHref(String href) {
    // check that actual Cards we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting href of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualHref = actual.getHref();
    if (!Objects.areEqual(actualHref, href)) {
      failWithMessage(assertjErrorMessage, actual, href, actualHref);
    }

    // return the current assertion for method chaining
    return this;
  }

}
